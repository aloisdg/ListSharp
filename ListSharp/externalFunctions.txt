			
			
			public string getString(object thevar) {
				if (thevar.GetType() == typeof(Int32)) return "[0]" + (Int32) thevar + "[/0]";
				if (thevar.GetType() == typeof(string)) return "[0]" + (string) thevar + "[/0]";
				if (thevar.GetType() == typeof(string[])) return arr2str((string[]) thevar);
				return "Show Error";
			}

			public string SHOW_F(object thein) {
				return System.Environment.NewLine + "---------------output--------------" + System.Environment.NewLine + getString(thein).Replace(System.Environment.NewLine, "<newline>" + System.Environment.NewLine) + System.Environment.NewLine + "-----------------------------------" + System.Environment.NewLine;
			}


			public string arr2str(string[] arr) {
				string r = "";
				for (int i = 0; i < arr.Length; i++)
				r += "[" + i + "]" + arr[i] + "[/" + i + "]\n";
				return r;
			}



			public string[] EXTRACT_F(string[] arr, string bywhat, int collumnum) {
				collumnum--;
				string[] temp;
				string[] restr = new string[arr.Length];
				for (int i = 0; i < arr.Length; i++) {
					temp = arr[i].Split(new string[] {
						bywhat
					}, System.StringSplitOptions.None);
					if (temp.Length > collumnum) restr[i] = temp[collumnum];
				}
				return restr;
			}


			public string[] COMBINE_F(string[][] srar, string bywhat) {
				int max = 0;
				for (int i = 0; i < srar.Length; i++) {
					if (srar[i].Length > max) max = srar[i].Length;
				}
				string[] tempo = new string[max];
				string sinline = "";
				for (int i = 0; i < max; i++) {
					for (int j = 0; j < srar.Length; j++) {
						if (i < srar[j].Length) sinline += srar[j][i];
						if (j != (srar.Length - 1)) sinline += bywhat;
					}
					tempo[i] = sinline;
					sinline = "";
				}
				return tempo;
			}

			public void OUTP_F(string path, object thevar) {
				if (thevar.GetType() == typeof(string)) {
					System.IO.File.WriteAllText(path, (string) thevar);
				}
				if (thevar.GetType() == typeof(string[])) {
					System.IO.File.WriteAllLines(path, (string[]) thevar);
				}
			}



			public string[] GETLINES_F(string[] ins,System.Collections.Generic.List<int> range)
			{

				string[] tempret = new string[range.Count];
				for (int i = 0; i < range.Count; i++)
				tempret[i] = ins.Length>=range[i]?ins[range[i]-1]:"";
				
				return tempret;
			}

			public static IEnumerable<int> EdgeRange(double start_d,double end_d)
            {
			int start = (int)start_d;
			int end = (int)end_d;

            return start < end ? Enumerable.Range(start, end - start + 1) : Enumerable.Range(end, start - end + 1).Reverse();
            }


			public string GETLINE_F(string[] ins, int linnum)
			{
			return ins.Length>=linnum?ins[linnum-1]:"";
			}



			public string[] ROWSPLIT_F(object thevar, string delimiter) {

				if (delimiter == "<newline>") delimiter = "\n";

				if (thevar.GetType() == typeof(string)) {
					string temp = (string) thevar;
					return temp.Split(new string[] {
						delimiter
					}, System.StringSplitOptions.None);
				}
				if (thevar.GetType() == typeof(string[])) {
					return stringarraysplitter((string[]) thevar, delimiter);
				}
				return null;
			}


			public string[] stringarraysplitter(string[] arr, string delimiter) {
				var results = new System.Collections.Generic.List<string>(arr.Length);
				
				for(int i = 0; i < arr.Length; i++){
				results.AddRange(arr[i].Split(new string[] {delimiter}, System.StringSplitOptions.None));
				}
				return results.ToArray();
			}


			public object REPLACE_F(object ob, string remove1, string remove2) {
				if (ob.GetType() == typeof(string)) {
					string st = (string) ob;
					return st.Replace(remove1, remove2);
				}

				if (ob.GetType() == typeof(string[])) {
					string[] starr = (string[]) ob;
					for (int i = 0; i < starr.Length; i++) {
						starr[i] = starr[i].Replace(remove1, remove2);
					}
					return starr;
				}

				return null;
			}

        public string[] ADD_F(string[] ogarr,object[] toadd)
        {

            var results = new System.Collections.Generic.List<string>();
            results.AddRange(ogarr);

            for (int i = 0; i < toadd.Length; i++)
            {
                if (toadd[i].GetType() == typeof(string[]))
                    results.AddRange((string[])toadd[i]);
                else
                    results.Add((string)toadd[i]);
            }

                return results.ToArray();
        }


        public static string DOWNLOAD_F(string url)
        {

            string r = "";
            while (r == "")
            {

                using (WebClient client = new WebClient())
                {
                    try
                    {
                        r = client.DownloadString(url);

                    }
                    catch
                    {
                    }

                }
            }
            return r;
        }




        public static object GETRANGE_F(object ob, int start, int end)
        {
           start = Math.Max(start-1,0);

            string[] temp_rows = ob.GetType() == typeof(string) ? new string[] { (string)ob } : (string[])ob;

            temp_rows = temp_rows.Select(n=>(start > n.Length-1 || end <= start)?"":n.Substring(start, Math.Min(end, n.Length) - start)).ToArray();

            if (ob.GetType() == typeof(string))
                return temp_rows[0];
            else
                return temp_rows;
        }

		public static int returnLength(object inp)
        {
            if (inp is string)
                return ((string)inp).Length;

            if (inp is string[])
                return ((string[])inp).Length;
            return 0;
        }



        public static object GETBETWEEN_F(object ob,string start,string end)
        {
        string[] rows = new string[0];
				if (ob.GetType() == typeof(string)) {
                    string s = (string) ob;
					rows = new string[]{s};
				}

				if (ob.GetType() == typeof(string[])) {
					rows = (string[]) ob;
				}


            var temp = new System.Collections.Generic.List<string>();

            foreach (string s in rows)
            {
            if (!s.Contains(start))
                if (!s.Contains(end))
                {
                    temp.Add(s);
                    continue;
                }

            if (s.Contains(start))
                if (!s.Contains(end))
                {
                    temp.Add(s.Substring(s.IndexOf(start) + start.Length, s.Length - (s.IndexOf(start) + start.Length)));
                    continue;
                }

            if (!s.Contains(start))
                if (s.Contains(end))
                {
                    temp.Add(s.Substring(0, s.Length - (s.LastIndexOf(end))));
                    continue;
                }

                int startindex;
                int endindex;


                    startindex = s.IndexOf(start) + start.Length;

                    endindex = s.LastIndexOf(end);

                if (startindex >= endindex)
                    startindex = 0;


                temp.Add(s.Substring(startindex, endindex - startindex));
            }

				if (ob.GetType() == typeof(string)) {
					return temp.ToArray()[0];
				}

            return temp.ToArray();
        }




