			
			
			public string getString(object thevar) {
				if (thevar.GetType() == typeof(Int32)) return "[0]" + (Int32) thevar + "[/0]";
				if (thevar.GetType() == typeof(string)) return "[0]" + (string) thevar + "[/0]";
				if (thevar.GetType() == typeof(string[])) return arr2str((string[]) thevar);
				return "Show Error";
			}

			public string SHOW_F(object thein) {
				return System.Environment.NewLine + "---------------output--------------" + System.Environment.NewLine + getString(thein).Replace(System.Environment.NewLine, "<newline>" + System.Environment.NewLine) + System.Environment.NewLine + "-----------------------------------" + System.Environment.NewLine;
			}


			public string arr2str(string[] arr) {
				string r = "";
				for (int i = 0; i < arr.Length; i++)
				r += "[" + i + "]" + arr[i] + "[/" + i + "]\n";
				return r;
			}



			public static string[] EXTRACT_F(string[] arr, string bywhat, int collumnum)
			{
				collumnum--;
				return arr.Select(n=> n.Split(new string[] { bywhat }, System.StringSplitOptions.None).ElementAtOrDefault(collumnum)).ToArray();
			}


			public string[] COMBINE_F(string[][] srar, string bywhat) {
				int max = 0;
				for (int i = 0; i < srar.Length; i++) {
					if (srar[i].Length > max) max = srar[i].Length;
				}
				string[] tempo = new string[max];
				string sinline = "";
				for (int i = 0; i < max; i++) {
					for (int j = 0; j < srar.Length; j++) {
						if (i < srar[j].Length) sinline += srar[j][i];
						if (j != (srar.Length - 1)) sinline += bywhat;
					}
					tempo[i] = sinline;
					sinline = "";
				}
				return tempo;
			}

			public void OUTP_F(string path, object thevar) {
				if (thevar.GetType() == typeof(string)) {
					System.IO.File.WriteAllText(path, (string) thevar);
				}
				if (thevar.GetType() == typeof(string[])) {
					System.IO.File.WriteAllLines(path, (string[]) thevar);
				}
			}



			public string[] GETLINES_F(string[] ins,System.Collections.Generic.List<int> range)
			{

				string[] tempret = new string[range.Count];
				for (int i = 0; i < range.Count; i++)
				tempret[i] = ins.Length>=range[i]?ins[range[i]-1]:"";
				
				return tempret;
			}

			public static IEnumerable<int> EdgeRange(double start_d,double end_d)
            {
			int start = (int)start_d;
			int end = (int)end_d;

            return start < end ? Enumerable.Range(start, end - start + 1) : Enumerable.Range(end, start - end + 1).Reverse();
            }


			public string GETLINE_F(string[] ins, int linnum)
			{
			return ins.Length>=linnum?ins[linnum-1]:"";
			}



			public static string[] ROWSPLIT_F(object ob, string delimiter)
			{
				if (delimiter == "<newline>") delimiter = "\n";
				return ob.GetType() == typeof(string) ? ((string)ob).Split(new string[] { delimiter }, System.StringSplitOptions.None) : ((string[])ob).SelectMany(n => n.Split(new string[] { delimiter }, System.StringSplitOptions.None)).ToArray();
			}


			public static object REPLACE_F(object ob, string toReplace, string replaceWith)
			{
				return ob.GetType() == typeof(string) ? ((string)ob).Replace(toReplace, replaceWith) : (object)((string[])ob).Select(n=>n.Replace(toReplace, replaceWith)).ToArray();
			}

			public static string[] ADD_F(string[] ogarr, object[] toadd)
			{
				return ogarr.Concat(toadd.SelectMany(n=> n.GetType() == typeof(string)?new string[] { (string)n } :(string[])n)).ToArray();
			}


			public static string DOWNLOAD_F(string url)
			{

				string r = "";
				while (r == "")
				{
					using (WebClient client = new WebClient())
					{
						try
						{
							r = client.DownloadString(url);
						}
						catch
						{
						}

					}
				}
				return r;
			}


			public static object GETRANGE_F(object ob, int start, int end)
			{
				start = Math.Max(start-1,0);
				string[] temp_rows = ob.GetType() == typeof(string) ? new string[] { (string)ob } : (string[])ob;
				temp_rows = temp_rows.Select(n=>(start > n.Length-1 || end <= start)?"":n.Substring(start, Math.Min(end, n.Length) - start)).ToArray();

				return ob.GetType() == typeof(string) ? (object)temp_rows[0] : temp_rows;
			}

			public static int returnLength(object inp)
			{
				if (inp.GetType() == typeof(int))
					inp = ((int)inp).ToString();
				return inp.GetType() == typeof(string) ? ((string)inp).Length : ((string[])inp).Length;
			}


			public static object GETBETWEEN_F(object ob, string start, string end)
			{  
				string[] temp_rows = ob.GetType() == typeof(string) ? new string[] { (string)ob } : (string[])ob;
				temp_rows = temp_rows.Select(n => (string)GETRANGE_F(n,n.IndexOf(start)+1+start.Length,n.LastIndexOf(end)!=-1? n.LastIndexOf(end):n.Length)).ToArray();

				return ob.GetType() == typeof(string) ? (object)temp_rows[0] : temp_rows;
			}




